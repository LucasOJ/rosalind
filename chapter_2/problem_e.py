import numpy as np
from typing import List

from utils import get_profile_matrix, index_to_nucleotide_map, get_probability_of_k_mer, iterate_kmers, get_score, consensus_from_profile_matrix

def greedy_motif_search(dna_regions: List[str], k: int, t: int) -> str:
    assert(len(dna_regions) == t)
    
    consensus_pairs = []

    # For all k-mers in the first dna_region...
    for inital_motif in iterate_kmers(dna_regions[0], k):
        motifs = [inital_motif]

        # ...one by one extend with the most likely k-mer from each of the dna_regions
        for dna_region in dna_regions[1:]:
            profile_matrix = get_profile_matrix(motifs, k)
            most_likely_k_mer = get_most_likely_k_mer(dna_region, profile_matrix, k)
            motifs.append(most_likely_k_mer)

        profile_matrix = get_profile_matrix(motifs, k)
        consensus_k_mer = consensus_from_profile_matrix(profile_matrix)
        score = get_score(motifs, k)
        consensus_pairs.append((score, motifs, consensus_k_mer, profile_matrix))
    
    # Choose motifs with lowest score
    min_score_pair = min(consensus_pairs, key=lambda x: x[0])
    return min_score_pair[1]

def get_most_likely_k_mer(dna_region: str, profile_matrix: np.ndarray, k: int) -> str: 
    k_mer_probabilities = [get_probability_of_k_mer(k_mer, profile_matrix) 
                           for k_mer in iterate_kmers(dna_region, k)]
    max_prob_k_mer_index = np.argmax(k_mer_probabilities)
    return dna_region[max_prob_k_mer_index:max_prob_k_mer_index + k]

### TESTS ###

def greedy_motify_search_tests():
    challenge = greedy_motif_search([
        "GGCGTTCAGGCA",
        "AAGAATCAGTCA",
        "CAAGGAGTTCGC",
        "CACGTCAATCAC",
        "CAATAATATTCG",
    ], 3, 5)
    expected = [
        "TTC",
        "ATC",
        "TTC",
        "ATC",
        "TTC",
    ]
    assert(np.array_equal(challenge, expected))
    print("greedy_motify_search tests passed")

def run_tests():
    greedy_motify_search_tests()
    print("== ALL PROBLEM_E TESTS PASSED ==")

run_tests()

### ROSALIND PROBLEM ###

motifs = [
    "AGTCATCCGCTTCTGTATATGCACATATGTCATAAAGAATTTGTTGAGCTCCGGATTCGTCGTTTCTGTTAATATCGCGCACAGGTTCAAGTTCTGCGCGAGAGACTCATATAGACACAAGCGTAGTGTAGGGCTCATATGAGGTCACCAAATTGC",
    "CCCCAATTCTGGTCCACCGTCACTGGCCCGATAAGCCGACGCGCCGGCCTCCGGATAAGTTGCGGTAAACTACTCCTCGGATCGCGTCGGAGTCCGGCTTGCGGACATCCCGAAATGTTTTGTAGCCGTCCGAGGTGGCCGCCTGTATTAACTTCC",
    "TTCGCCTGAATTACGCGCTTAGGATACTAAGAGAGCTTATACGCGTGTAACCTTTAAGCTCTCCCGATTGGGCATTGGACAGATTTGAACCCTTGCAGTGATGCTGTCGCGGGTCGGAACGAAACCTCGTCGCTCGGTGTAGAGTAGACGTGATAG",
    "CCCCCTCGGCGGCTCCCGATGAGCTTCCACCAATTCCTGTAAATGCGAGTGCCCTAGACTCTAGATCTGCAACGGCACGATTTGAAACGGCGATTGCGAGAAGGGCAAACTGCAACTGCTTATAACGAATCACGGGGAAAAATAGCTGAACTATGC",
    "GATGGAGTCCACCAGTGCGGGGAAGCGTAAGCGCTACCCAAAGCGCCAGCTATGAAATAAGACTAGAGGATATCAAAACCGGACACTTTGCTCATGCTCCAGATCAGAGTTATTCTTGCTCTAGCATTGGACCGAGTCCCACCCTTTGGATCTCAT",
    "CTGCAGTGGGAACTCCAGATCGGCACTTGTGCCAGATGATCGCATGCCTGCTACGTATACGTATCGGGAGTATACGGGAGTCTGTTATGCGCTAAAAAGAATTAGATCGATCCCGAACCTATTACTACAGGGGAGCAAACTACGACGAGCAGTGGG",
    "CCTTCTGCGGTACCTTACATGCTCTATACGGGAAAATGTTAAGTACCTGCAATCATTTCAAATCCTCCCCCTTGTCCGTCGCATTAACTCAGGGCCATGCCCCTGATCATCCGGTCTACACTCCTGATCTGCGTTACTATAACATAGCACTCTACG",
    "ATACGTGAATCACGCGATGCTCTCTATGGGACAAGTAGGCGCAATACAGATCAGTACTTACTCCAGATGCGGTTGAATTCAACTCGCTAGTGCTAGTTTCGGAAAATAGTCGTACAGGAACTGACGTAATTGAGTGAACCCTTTGCAGAGATGTTA",
    "ATGGGTAGTAGCATTAACTTCTGCGATACAAGATACGCATCCCGCAAGAGCAGCAGTTACGGATGTGGCCGTATTCTGTGAGGATTATCTCGTGTCGATGGCAAGTGTAAGTACGGTATTTCGGGGCGCCCGCTCCGGATTAGCGCATAGACTTTA",
    "GGGCAGCAAGCTATGCCCCTTCTTTGGATGTGTAAGCTCCCGATCTGCTCGTAGTTTAAGTCGGCCTCGTTTTTTTACGCCACTCGAGGGTCAATTCAGTACGATTGTTTCATTAGCATTAACTCTGCAAGAAGCGCACCGAATTACATAAGTGCT",
    "CCGGTTACGCATCGTCTCCCAGTTTCCACGGCGTTTCGCAAAAATCCGATCGTTGCAAGCGTTAAGATATGAGCGTGTAGTTTGTGCCAACTGGGAGTTATCTGTCCTCTCGAGGGCGACGACTCTGGACTAAATACCCCGTCTCTCCTGATTGGA",
    "AGTCTCACGAATTCTACTAGGGCGTGTCATCCTCCTCAGAACAGCCGCCATTATCCTGACGTTTAATTTATAGACTCATTCGTTCCGAGCTAATACCGAGATCATCGCTGGTGTTACCCGCTCCCGATTTGCCCACATATGGCTAGTCCGTCGAGG",
    "CTCCTGATGGGTGACGCCTGTTTTCCGAGTAAGACCCAAAACCGCCACGCGATCAGTCTTGGCCTTGGGTCAGTACGGAGTTGTGTTGTATCCCGTCTCAGGACTGCAAGCTTTCTTCTTGTCTTTGCAGTTCTTATGTGGATACGTTCCCCTTAA",
    "TGACCTAAACTGTATAAGCCAGGCCGGTGATCACTGGGGAACTCGTTTGAGCCAGCAGCCATGTATGTGCCCACCTACCTGCGAAGCTGGTGGGCTATGGTTGGGCAGCTCCCGATCCGGGACTTTTTATGAGCGATTACTATGGATTTAGACTGT",
    "CCTCTGGCATATTAATGCTTCGGACGCGGCGGGACCTCGGTTTCTTATAGAAATGGCGGCCACGTCCTGCCATTCGGTCATTCACGTGAGATTGTATCATTGACGGATTCTTCAATTAGTCTCCAGATGCGATGCATCTACTTGGCGGGGAACGGC",
    "GTCCTTCTTTAATCTATTTACCTATAAGCTCGAGTTAAGAAGCTTTGTATCCATTGGCATCTCCGGATAAGAAGTTTTACAAGTAACTACGTCATGGCCTGAGCGGGAAAGGTGGTCATGTGCAGTCAATTCGAGGAAGGTCCGTCATCCGCTCGG",
    "AACGATGTATGCCTCCTGATAGGCCGCTCGTAACATAACTCCCTATTTGGGACTGTAGCCGGATCAAGGTTGCTTATTTCTATCCACTGCACTTCATTCTGTTCCCCAGGTTAGTTCGCTAATATTGGGTGGCACGATTGATATCTCCTGAACATT",
    "CGGGATGCTGGCGCCACGAGTGCTTACACATTTGATATATGACACAGGTATTTCGCTACCCGTTGCACTAGCCCTTCTTTCACAATTTACGTTCCTGACACGACTAGTTTTGAAGATCTTCTCCGGATGTGACGCAACTGCGGCTACGTTACATCA",
    "TCACTTGAAGCGCCCCGGTACTGACACGAGGAACAGTGAAACATACAACTCCTGATTCGGTGAGCCTATGCCAATACGAGTGCCACTACCACGTTAGACGTGACTTAGCGTGGTACCGCGCTCGCGATAGTCTAGCGGTCAAGCCGTTGAGCTATG",
    "ACGCTTTAGCCTTGAGGGACTACGACGAATAACTACTAAATCACATAGCTCCAGATCTGGTCGAATGCCAGCGAGGACCTGGACAAACGGCTTCGAGGCCCCTACTGTGCGGGATCATTAAGACGTTAAAACTCACTGAAAATATTTGGCCACCTC",
    "CAGCAGGGTTTTTAAGTGTCACATCAGATCACTGTAACAGTGCCAAAGTTACTTTTTCCGCTCCAGATGCGTCTAACGGCCGCATGTCCAGTGATAGCAGGGCCGCCTTGGCATGGGCCATCTAGGACTCGCCTGGACGTTGCCTCCGACTGGCTG",
    "CTCCTGATGGGATCTGGCATTTAGAAATGTACCTGTAAACGGAAAAACTCTCGTATGGGGGTTCGCACTTTTTCTATGCGTGGCCCCGAGAGTGAGGGTTAAACCACGGAGGTGTTCCCAGAGATGTCATCCGTGTCTTTGCAGTGAGTAAGGCTA",
    "GCGGTCGTCCTTAGCGTTCCCACATATACAGGCGTTATAGGCCCAGGTACCAGGCTTTTGTCCTCGTGAGTGCATGAGCCTTGTCTCCCGATTCGGGTAGCAAAGCGATGAAAAACCCCTGAGGTGGTGGAGTGCTTACGTTTATTCATTCGTAAG",
    "TGGGGACCCTAAGATAGCTGGCTCTGTTAATTACCAATCCATTAAATCCGCATCTGTCCGCTCCGCTCGTTAGTTAGTAGTGTTCGACTTTATCACCTCCTGATTTGCCACAAGGTGGGCATTCGATACCGGCGCAAGGTGGCAGCTTTTACCTCA",
    "TTGCCATTGTTGACTTCATTATCGGTGCTCCTCAAATCGGAGGGGGCCCTCCAGATTAGAAAGCCGTGGCTACCCGATATTTCCGCTCGCAGCCCGCTTGCCCCTTGTGAAGCTGGCGACGAGCCGCCGATAACTACCCTTGGCCCCTTCCGAATA",
]

for motif in greedy_motif_search(motifs, 12, 25):
    print(motif)
